#!/usr/bin/env sh
# Pulldozer: https://github.com/duolingo/pulldozer

set -eu

# Prints an info message to stderr
log_info() {
  printf '%s%s%s\n' "$(tput setaf 2)" "${1:-}" "$(tput sgr0)" >&2
}
log_error() {
  printf '%s%s%s\n' "$(tput setaf 1)" "${1:-}" "$(tput sgr0)" >&2
}

# Prints an error message to stderr and then exits with 1
die() {
  log_error "${1:-}
Exited without making any changes."
  exit 1
}

# Prints a horizontal divider to stderr
log_divider() {
  log_info "$(printf %70s '' | tr ' ' '=')"
}

# Helper for users who want something easier than sed
replace_all() {
  # Read and validate params
  before="${1}"
  shift
  after="${1}"
  shift
  path_regex="${1}"
  if [ -z "${before}" ]; then
    die "Usage: replace_all 'search regex' 'replacement' 'file path regex' # last arg optional
Example: replace_all 'colou?r' 'hue' 'README\.md'"
  fi

  # Check for GNU sed. https://stackoverflow.com/a/65497543
  if sed --version > /dev/null 2>&1; then
    gnu_sed_command='sed'
  else
    gnu_sed_command='gsed'
    if ! command -v gsed > /dev/null; then
      if command -v brew > /dev/null; then
        log_info '`replace_all` requires gsed. Installing via Homebrew...'
        if HOMEBREW_NO_ENV_HINTS=1 brew install gsed 2> /dev/null; then
          log_info 'gsed installed successfully!'
        else
          die 'Failed to install gsed from Homebrew'
        fi
      fi
      if ! command -v gsed > /dev/null; then
        die 'Please try again after installing gsed (GNU sed).'
      fi
    fi
  fi

  # Determine char to use as sed delimiter
  # TODO: Try using unprintable char(s) like \001 as delimiter?
  delimiter=''
  for delimiter_candidate in '/' ';' '@' '#' '_' ':' '%'; do
    if ! printf %s "${before}${after}" | grep -qE "${delimiter_candidate}"; then
      delimiter="${delimiter_candidate}"
      break
    fi
  done
  if [ -z "${delimiter}" ]; then
    die 'replace_all params are too complex - no possible sed delimiter found'
  fi

  # If `before` contains no newlines, use it to speed up git grep
  git_grep_needle=''
  if [ -z "$(printf "${before}" | sed 1d)" ]; then
    git_grep_needle="${before}"
  fi

  # Perform replacements
  git grep -EIl "${git_grep_needle}" | grep -E "${path_regex:-.}" | while read -r path; do
    # https://stackoverflow.com/a/1252191
    "${gnu_sed_command}" -i -E \
      ":a;N;\$!ba;s${delimiter}${before}${delimiter}${after}${delimiter}g" \
      "${path}"
  done
}

# Verify that cURL is installed
if ! command -v curl > /dev/null; then
  die 'Please install cURL first.'
fi

# Loosely verify that Pulldozer is being invoked from inside its repo
if [ ! -f pulldozer ]; then
  die 'Pulldozer should be run from inside its own repo, i.e. ./pulldozer'
fi

# Validate GitHub token
if ! printf %s "${GITHUB_TOKEN}" | grep -qE '^[0-9A-Za-z_]{32,}$'; then
  die 'GITHUB_TOKEN environment variable is missing or invalid!'
fi

# Source and minimally validate all user-defined variables
readonly SCRIPT_PATH="${1:-}"
if [ -z "${SCRIPT_PATH}" ]; then
  die 'No script file specified!'
fi
readonly script_contents="$(cat "${SCRIPT_PATH}")"
if [ "${SCRIPT_PATH}" = *.js ] || head -1 "${SCRIPT_PATH}" | grep -qE '^#!.*node'; then
  if ! command -v node > /dev/null; then
    die 'Please install Node.js first!'
  fi
  eval_js() {
    printf "$(node -e "${script_contents}
$1")"
  }
  readonly COMMIT_MESSAGE="$(eval_js 'console.log(COMMIT_MESSAGE)')"
  readonly REPOS="$(eval_js 'console.log(REPOS.join("\n"))')"
  transform() {
    eval_js "const replace_all = async (before, after, pathRegex) => {
  const { exec } = require('child_process');
  const { readFile, writeFile } = require('fs').promises;
  const { promisify  } = require('util');
  if (typeof before === 'string') {
    before = new RegExp(before, 'g');
  } else if (!before.flags.includes('g')) {
    before = new RegExp(before.source, before.flags + 'g');
  }
  if (pathRegex) {
    if (typeof pathRegex === 'string') {
      pathRegex = new RegExp(pathRegex, 'g');
    } else if (!pathRegex.flags.includes('g')) {
      pathRegex = new RegExp(pathRegex.source, pathRegex.flags + 'g');
    }
  }
  const { stdout  } = await promisify(exec)('git grep -Il .');
  await Promise.all(stdout.trim().split('\n').map(async path => {
    if (pathRegex && !pathRegex.test(path)) {
      return;
    }
    contentsBefore = await readFile(path, 'utf8');
    contentsAfter = contentsBefore.replace(before, after);
    if (contentsBefore !== contentsAfter) {
      await writeFile(path, contentsAfter);
    }
  }));
};
transform('$1','$2');"
  }
  if grep -qE '\bDESCRIPTION *=' "${SCRIPT_PATH}"; then
    DESCRIPTION="$(eval_js 'console.log(DESCRIPTION)')"
  fi
elif [ "${SCRIPT_PATH}" = *.py ] || head -1 "${SCRIPT_PATH}" | grep -qE '^#!.*python'; then
  if command -v python3 > /dev/null; then
    readonly python_command='python3'
  elif command -v python > /dev/null; then
    readonly python_command='python'
  else
    die 'Please install Python first!'
  fi
  eval_python() {
    printf "$("${python_command}" -c "${script_contents}
$1")"
  }
  readonly COMMIT_MESSAGE="$(eval_python 'print(locals().get("COMMIT_MESSAGE", ""))')"
  readonly REPOS="$(eval_python 'print("\n".join(locals().get("REPOS", [])))')"
  if [ -z "$(eval_python 'print(locals().get("transform", ""))')" ]; then
    die "Function 'transform' is undefined inside ${SCRIPT_PATH}!"
  fi
  transform() {
    eval_python "import re, subprocess
def replace_all(before, after, path_regex=None):
    for path in subprocess.check_output([
        'git', 'grep', '-Il', ''
    ]).decode().strip().splitlines():
        if path_regex and not re.search(path_regex, path):
            continue
        with open(path, 'r') as f:
            contents_before = f.read()
        contents_after = re.sub(before, after, contents_before)
        if contents_before != contents_after:
            with open(path, 'w') as f:
                f.write(contents_after)
transform('$1','$2')"
  }
  DESCRIPTION="$(eval_python 'print(locals().get("DESCRIPTION",""))')"
else
  # shellcheck disable=SC1090
  . "${SCRIPT_PATH}"
  if ! type transform 2> /dev/null | grep -q function; then
    die "Function 'transform' is undefined inside ${SCRIPT_PATH}!"
  fi
fi
DESCRIPTION="${DESCRIPTION:-}"
if [ -z "${COMMIT_MESSAGE:-}" ]; then
  die "Variable COMMIT_MESSAGE is undefined inside ${SCRIPT_PATH}!"
fi
if [ -z "${REPOS:-}" ]; then
  die "Variable REPOS is undefined inside ${SCRIPT_PATH}!"
fi

# Normalize repo specifiers
normalized_orgrepos=''
IFS='
'
for orgrepo in ${REPOS}; do
  # Remove whitespace
  orgrepo="$(printf %s "${orgrepo}" | tr -d '[:space:]')"

  # Validate org and repo name
  if ! printf %s "${orgrepo}" | grep -q '/'; then
    die "Invalid repo specifier: ${orgrepo}
Please specify the org name, e.g. 'artnc/dotfiles' instead of just 'dotfiles'"
  fi
  if ! printf %s "${orgrepo}" | grep -qE '^[A-Za-z0-9-]+/[A-Za-z0-9_\.-]+$'; then
    die "Invalid repo specifier: ${orgrepo}"
  fi

  normalized_orgrepos="${normalized_orgrepos}${orgrepo}
"
done
normalized_orgrepos="$(printf %s "${normalized_orgrepos}" | uniq)"

# Define a helper function for running other functions inside each local repo.
# Passed-in functions are invoked with a single argument: "$org/$repo"
do_inside_each_repo() {
  parallel="${2:-}"
  for orgrepo in ${normalized_orgrepos}; do
    repo_dir="cache/repos/${orgrepo}"
    mkdir -p "${repo_dir}"
    pushed_dir="${PWD}" && cd "${repo_dir}"
    if [ -n "${parallel}" ]; then
      "${1}" "${orgrepo}" &
    else
      "${1}" "${orgrepo}"
    fi
    cd "${pushed_dir}"
  done
  if [ -n "${parallel}" ]; then
    wait
  fi
}

# Clone repos
log_info 'Step 1/4: Refreshing local repo cache...'
refresh_repo() {
  # Fetch latest repo commit if already cloned, otherwise shallow clone
  if [ -d .git ]; then
    if ! git fetch --depth 1 origin master 2> /dev/null; then
      die "Failed to fetch ${1}"
    fi
    git reset --hard origin/master > /dev/null
    git clean -dfx > /dev/null
    git branch | grep -vE ' master$' \
      | xargs git branch -D > /dev/null 2>&1 || true
  elif ! git clone --depth 1 "https://github.com/${1}.git" "${PWD}"; then
    die "Failed to clone ${1}"
    exit 1
  fi
}
do_inside_each_repo refresh_repo 1

# Create temporary directory for this Pulldozer run
readonly now="$(date +%s)"
readonly tmp_dir="${TMPDIR:-/tmp}/pulldozer/${now}"
mkdir -p "${tmp_dir}"

# Apply code transformation
log_divider
log_info 'Step 2/4: Applying code transformation to each local repo...'
readonly branch_name="pulldozer-${now}"
readonly combined_diff_file="${tmp_dir}/combined.diff"
modified_repos=''
transform_repo() {
  # Modify code
  git checkout -b "${branch_name}" 2> /dev/null
  org="$(printf %s "${orgrepo}" | cut -d/ -f1)"
  repo="$(printf %s "${orgrepo}" | cut -d/ -f2)"
  set +u
  transform "${org}" "${repo}" || die "Failed to transform ${1}."
  set -u

  if [ -z "$(git status --short)" ]; then
    log_info "Repo ${1} remains unchanged."
  else
    # Commit
    log_info "Repo ${1} was locally modified:"
    git add --all
    git commit --message="${COMMIT_MESSAGE}" --no-verify | tail -1
    modified_repos="${modified_repos}  - ${1}
"

    # Save diff (slightly modified to include org and repo names)
    git diff HEAD~ \
      | sed -E \
        -e "s%^(diff --git a/)(.+) b/(.+)\$%\\1${1}/\\2 b/${1}/\\3%g" \
        -e "s%^(--- a/)%\\1${1}/%g" \
        -e "s%^(\\+\\+\\+ b/)%\\1${1}/%g" \
        >> "${combined_diff_file}"
  fi
}
do_inside_each_repo transform_repo
if [ -z "${modified_repos}" ]; then
  die "Your transformation function didn't modify any of the specified repos."
fi

# Ask for confirmation before creating PRs
log_divider
log_info 'Step 3/4: These repos have been locally modified:'
log_info
log_info "${modified_repos}"
log_info "Local branch name: ${branch_name}"
log_info "To view all changes, see ${combined_diff_file}"
log_info "(Edits to this diff file won't take effect. If you really must hand-"
log_info "tweak some repos' commits, go into cache/repos/ and amend them now.)"
log_info
readonly num_prs="$(printf %s "${modified_repos}" | grep -c /)"
if [ "${num_prs}" = '1' ]; then
  printf %s "$(tput setaf 2)Create ${num_prs} pull request? [y/n] $(tput sgr0)"
else
  printf %s "$(tput setaf 2)Create ${num_prs} pull requests? [y/n] $(tput sgr0)"
fi
read -r yn
if [ "${yn}" != 'y' ]; then
  die 'Aborted by user.'
fi

# Generate JSON-serialized PR description containing transformation script
readonly pulldozer_sha="$(git rev-parse HEAD | cut -c-7)"
readonly pr_description_file="${tmp_dir}/description.md"
: > "${pr_description_file}"
if [ -n "${DESCRIPTION}" ]; then
  printf '%s\n\n---\n\n' "${DESCRIPTION}" >> "${pr_description_file}"
fi
printf '<details><summary>Click here to view the <a href="https://github.com/duolingo/pulldozer/tree/%s">Pulldozer</a> transformation script used to create this PR</summary>\n\n```shell\n%s\n```' \
  "${pulldozer_sha}" "${script_contents}" \
  >> "${pr_description_file}"
if command -v jq > /dev/null; then
  readonly pr_description="$(jq -Rs . "${pr_description_file}")"
elif command -v python > /dev/null; then
  readonly pr_description="$(python -c \
    'import codecs,json,sys;print(json.dumps(codecs.open(sys.argv[1]).read()))' \
    "${pr_description_file}")"
elif command -v sed > /dev/null; then
  readonly pr_description="\"$(sed -e ':a' -e 'N' -e '$!ba' \
    -e 's/\\/\\\\/g' \
    -e 's@/@\/@g' \
    -e 's/"/\\"/g' \
    -e 's/	/\\t/g' \
    -e 's/\n/\\n/g' \
    "${pr_description_file}")\""
else
  die 'At least one of these must be installed: jq, python, sed'
fi

# Create PRs
log_divider
log_info 'Step 4/4: Pushing branches to GitHub and creating pull requests...'
create_pr() {
  # Skip if unchanged
  if [ "$(git rev-parse "${branch_name}")" = "$(git rev-parse origin/master)" ]; then
    return
  fi

  # Push branch and open PR
  if ! git push --set-upstream origin "${branch_name}" > /dev/null 2>&1; then
    log_error "Failed to push to ${1}. Do you have write access?"
    exit 1
  fi
  sleep 2
  api_response="$(
    curl -s -X POST \
      "https://api.github.com/repos/${1}/pulls" \
      -H "Authorization: bearer ${GITHUB_TOKEN}" \
      --data @- << EOF
      {
        "base": "master",
        "body": ${pr_description},
        "head": "${branch_name}",
        "title": "$(printf %s "${COMMIT_MESSAGE}" | head -1 | sed 's/"/\\"/g')"
      }
EOF
  )"
  if ! printf %s "${api_response}" | grep -q html_url; then
    log_error "${api_response}"
    log_error 'Created branch but failed to create PR! See error above.'
    exit 1
  fi
  log_info "Created $(printf %s "${api_response}" | grep -E '^  "html_url":' | cut -d'"' -f4)"
}
do_inside_each_repo create_pr
log_info 'Done!'
